{
    "sampleDescription": "## **Introduction to Recursion in Python**\n\n\n### **What you learn in this segment of the tutorial**\n- Understand what is recursion\n- Implement non-recursion for factorial problem\n- Implement recursion for factorial problem\n- Understand the potential issues using recursion\n\n### **Introduction**\nRecursion is the process of defining something in terms of itself. A recursive function is a function that calls itself.\n\n![](https://cdn.programiz.com/cdn/farfuture/6i17bRQT6hWIqw9JE5rMMyW527g7It_68T7kSzpIplo/mtime:1591262415/sites/tutorial2program/files/python-recursion-function.png)\n\n### **Factorial Problem**\nGiven an integer, factorial of the integer is the product of all the integers from 1 to that number.\n\nFor example, factorial of 4 (or 4!) is `1*2*3*4 = 24`\n\n### **Coding steps**\n\n- Non-Recursive approach using while loop\n\n- Recursive approach\n\n\n### **When to use**\n- Recursion is made for solving problems that can be broken down into smaller, repetitive problems.\n- Recursive functions make the code look clean and elegant.\n- Good for working on things that have many possible branches and are too complex for an iterative approach.\n\n![](https://miro.medium.com/max/700/0*5EuDOMXrvbghXkpn.jpg)\n\n### **When not to use**\n- Readability. The logic behind recursion is hard to follow through.\n- Resource Usage. Recursive calls are expensive (inefficient) as they take up a lot of memory and time.",
    "sampleInput": "python\njava",
    "samplePythonCode": "language1 = input()\nlanguage2 = input()\nprint(\"I am learning to code in \" + language1 + \" and \" + language2)",
    "sampleJavaCode": "import java.util.Scanner;\n\npublic class HelloWorld {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tString language1 = input.next();\n\t\tString language2 = input.next();\n\t\tSystem.out.print(\"I am learning to code in \" + language1 + \" and \" + language2);\n\t}\n}",
    "sampleJavaScriptCode": "const stdin = process.openStdin();\n\nstdin.on('data', input => {\n\tinput = input.toString().split(\"\\n\");\n\tlanguage1 = input[0];\n\tlanguage2 = input[1];\n\tconsole.log(\"I am learning to code in \" + language1 + \" and \" + language2);\n});",
    "sampleQuestion": {"quizTitle": "These questions are for you to reflect on the concepts", "questions": [{"question": "Which is the most appropriate definition for recursion?", "questionType": "text", "answerSelectionType": "single", "answers": ["A function execution instance that calls another execution instance of the same function", "A function that calls the main method", "A class method that calls another class method", "An in-built method that is automatically called"], "correctAnswer": "2", "point": "1"}, {"question": "Which of these is true about recursion?", "questionType": "text", "answerSelectionType": "single", "answers": ["Recursive function cannot be replaced by a non-recursive function", "Recursive functions usually take more memory space than non-recursive function", "Recursive functions run slower than non-recursive function", "Recursion makes programs easier to port"], "correctAnswer": "2", "point": "1"}, {"questionType": "text", "answerSelectionType": "single", "answers": ["4", "8", "16", "32"], "correctAnswer": "1", "question": "How many lines will the following program print? \n<code>\ndef f(n):    \n    if n >1:     \n        print('Still printing')     \n        f(n/2)  \n\nf(32)\n</code>", "point": "1"}, {"question": "Which Data Structure is used to perform Recursion?", "questionType": "text", "answerSelectionType": "single", "answers": ["Queue", "Stack", "Linked List", "Tree"], "correctAnswer": "2", "point": "1"}]}
}